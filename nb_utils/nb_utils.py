# This file was automatically generated by build_nb_utils.py
# - generation date: 2025-08-28

from IPython.display import Markdown as md


class NBLink:
    def __init__(self, ip, topicname, topic_super_class: str = ""):
        self.topicname = topicname
        self.topic_super_class = topic_super_class
        self.ip = ip

    def __call__(self, i, topic_nb_name, descr):
        return f"Exercise {i} can be found by clicking [{descr}](http://{self.ip}/notebooks/{f'/{self.topic_super_class}' if len(self.topic_super_class) > 0 else ''}/{self.topicname}/{topic_nb_name}/{topic_nb_name}.ipynb)"


def nb_init(topic_name: str, topic_super_class: str = ""):
    if topic_name not in NOTEBOOK_DICT:
        raise RuntimeError("Please fill in the correct <topicname>.")
    context = {'topic_name': topic_name, 'topic_super_class': topic_super_class, 'ip': EXERCISES_IP}
    return context


def exercises(context):
    link = NBLink(context['ip'], context['topic_name'], context['topic_super_class'])
    topic_name = context['topic_name']
    keys = NOTEBOOK_DICT[topic_name]

    if len(keys) == 0:
        output = f"There are no exercise notebooks associated with the '**{topic_name}**' topic yet..."
    else:
        output = "## Links to Exercises\n" \
                 f"Found **{len(keys)}** Jupyter Notebooks associated with the '**{topic_name}**' topic:\n"
        for i, key in enumerate(keys):
            lnk = link(i + 1, key, f'{topic_name}/{key}')
            output += f"- {lnk}\n"

    return md(output)


EXERCISES_IP = '127.0.0.1:8888'
NOTEBOOK_DICT = {
    'advanced_architectures': [
    ],
    'annotation': [
        'conversion',
        'quiz',
    ],
    'camera_geometry': [
        'projection',
    ],
    'cnn': [
        'quiz',
        'basics',
        'cifar10_cnn',
    ],
    'color_fundamentals': [
        'color_fundamentals',
    ],
    'computing_hardware_1': [
        'quiz',
    ],
    'computing_hardware_2': [
        'vectorizing',
        'broadcast1',
        'broadcast2',
        'naive_iou',
        'vectorized_iou',
        'gpu_iou',
    ],
    'cv_intro': [
        'quiz',
    ],
    'data_exploration': [
        'data_exploration',
    ],
    'dim_reduction': [
        'linear_mapping',
    ],
    'dl_intro': [
        'quiz',
    ],
    'filtering': [
        'convolution',
        'edge_detection',
        'corner_detection',
        'blob_detection',
        'morphology',
    ],
    'hyperparameter_tuning_1': [
        'tuning',
        'quiz',
    ],
    'hyperparameter_tuning_2': [
        'genetic_alg',
    ],
    'image_math': [
        'image_math',
    ],
    'image_transforms': [
        'image_transforms',
    ],
    'learning_methodology': [
        'cifar10_svc',
        'cifar10_knn',
        'cifar10_rnd',
    ],
    'linear_algebra': [
        'linear_algebra',
        'analytic_geometry',
        'matrix_decompositions',
        'quiz',
    ],
    'linear_models': [
        'cifar10_lr',
        'quiz',
    ],
    'math_for_ml': [
        'equations',
        'quiz',
    ],
    'ml_intro': [
        'quiz',
    ],
    'my_first_cnn': [
        'bob_and_alice',
    ],
    'neural_network': [
        'cifar10_mlp',
        'quiz',
    ],
    'other_tasks_dl': [
        'quiz',
    ],
    'pipeline_intro': [
        'quiz',
    ],
    'preprocessing': [
        'edge_detection',
        'corner_detection',
        'blob_detection',
        'ridge_detection',
    ],
    'reinforcement_learning': [
        'conversion',
    ],
    'scientific_programming': [
        'debugging',
        'pytorch',
    ],
    'segmentation_fundamentals': [
        'segmentation_fundamentals',
    ],
    'spectral_imaging': [
        'spectral_imaging',
    ],
    'statistical_models': [
        'cifar10_nb',
        'quiz',
    ],
    'synthetic_data_2': [
        'quiz',
    ],
    'training': [
        'quiz',
    ],
    'validation': [
        'validation_exercises',
        'validation_segmentation',
        'validation_metrics',
        'loss_functions',
        'quiz',
    ],
    'vision_hardware': [
        'convert_image',
        'quiz',
    ],
}
